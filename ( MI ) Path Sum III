class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        
        if not root: return 0
        cnt = 0
        
        def find_path_from_node(root, target, currsum):
            
            nonlocal cnt
            if not root: return 
            currsum += root.val
            if currsum == target:
                cnt += 1
                
            find_path_from_node(root.left, target, currsum)
            find_path_from_node(root.right, target, currsum)
        
        def dfs(root):
            
            if not root: return 
            find_path_from_node(root, targetSum, 0)
            
            dfs(root.left)
            dfs(root.right)
        
        dfs(root)
        return cnt
            

class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        
        d = {0:1}
        
        def dfs(root, currsum, target):
            
            if not root: return 0
                
            currsum += root.val
            res = 0

            if currsum-target in d:
                res += d[currsum-target]

            if currsum in d:
                d[currsum] += 1
            else:
                d[currsum] = 1

            res += dfs(root.left, currsum, target)
            res += dfs(root.right, currsum, target)

            d[currsum] -= 1
            return res 
            
        return dfs(root, 0, targetSum)
