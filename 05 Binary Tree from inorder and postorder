SOLUTION 1.)
-------------------------------------------------------->>>>>>>

class Solution:
    def build(self, postorder, d, beg, end):
        if beg > end: 
            return None
        root = TreeNode(postorder.pop())
        index = d[root.val]
        root.right = self.build(postorder, d, index+1, end)
        root.left = self.build(postorder, d, beg, index-1)
        
        return root
        
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        d = {v:i for i,v in enumerate(inorder)}
        return self.build(postorder, d, 0, len(inorder)-1)
   
SOLUTION 2.)
---------------------------------------------------->>>>>>>
( Efficient )

def buildTree(In, post, n):
    
    def dfs(In, post, n):
        if In:
            index = In.index(post.pop())
            root = Node(In[index])
            root.right = dfs(In[index+1:], post, n)
            root.left = dfs(In[:index], post, n)
            return root
    
    return dfs(In, post, n)
